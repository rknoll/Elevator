apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

group = 'at.fhhagenberg.sqe.project'
version = '0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
}

buildscript {
    repositories { mavenCentral() }
    dependencies { classpath 'org.ajoberstar:gradle-jacoco:0.2.0' }
}

if (hasProperty('teamcity') && !property('teamcity')['build.number'].startsWith(version + "-")) {
    version += '-' + property('teamcity')['build.number']
    println "##teamcity[buildNumber '" + version + "']"
} else if (hasProperty('teamcity')) {
    version = property('teamcity')['build.number']
}

mainClassName = 'at.fhhagenberg.sqe.project.ElevatorProgram'

jar {
    manifest {
        attributes 'Implementation-Title': 'Elevator', 'Implementation-Version': version, 'Main-Class': 'at.fhhagenberg.sqe.project.ElevatorProgram'
    }
}

test.finalizedBy jacocoTestReport

uploadArchives {
    repositories {
        ivy {
            credentials {
                username = System.getenv('IVY_USERNAME')
                password = System.getenv('IVY_PASSWORD')
            }
            url System.getenv('IVY_HOST')
            layout 'maven'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.springframework', name: 'spring-context', version: '4.1.4.RELEASE'
    runtime group: 'log4j', name: 'log4j', version: '1.2.14'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.easymock', name: 'easymock', version: '3.1'
    testCompile group: 'com.github.WojtekKowaluk', name: 'abbot', version: '1.2.0'
}

jar {
    from configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

javadoc  {
    options.addStringOption('sourcepath', '')
}

task javadocZip(type: Zip, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    archiveName 'SQE-Project-Elevator-javadoc.zip'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocZip
    archives javadocJar
}
